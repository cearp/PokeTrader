# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - api is an example of Hypermedia API support and access control
#########################################################################

def index():
    # Let's get all data.
    show_all = (request.args(0) == 'all')
    q = (db.bboard) if show_all else (db.bboard.available == True)
    start_idx = 1 if show_all else 0,

    def generate_del_button(row):
        b = ''
        if auth.user_id == row.user_id:
            b = A('Delete', _class='btn', _href=URL('default', 'delete', args=[row.id], user_signature = True))
        return b

    def generate_edit_button(row):
        b = ''
        if auth.user_id == row.user_id:
            b = A('Edit', _class='btn', _href=URL('default', 'edit', args=[row.id], user_signature = True))
        return b

    def shorten_post(row):
        return row.bbmessage[:10] + '...'

    links = [
        dict(header='', body = generate_del_button),
        dict(header='', body = generate_edit_button),
        ]

    form = SQLFORM.grid(q,
        fields=[db.bboard.user_id, db.bboard.date_posted,
                db.bboard.pokemon, db.bboard.title,
                db.bboard.bbmessage, db.bboard.available],
        editable=False, deletable=False,
        links=links,
        paginate=20,
        )

    if show_all:
        button = A('See Unsold', _class='btn', _href=URL('default', 'index', user_signature = True))
    else:
        button = A('See All', _class='btn', _href=URL('default', 'index', args=['all'], user_signature = True))
    #bboard = db.bboard(request.args(0,cast=int)) or redirect(URL('index'))
    #comments = db(db.reply.bboard_id==bboard.id).select()
    form = db(db.bboard.user_id==auth.user.id).select(orderby=~db.bboard.date_posted,limitby=(0,100))
    return dict(form=form,button=button)
@auth.requires_login()
def myshop():
    posts = db(db.bboard.user_id==auth.user.id).select(orderby=~db.bboard.date_posted,limitby=(0,100))
    return dict(posts=posts)


@auth.requires_login()
def add():
    """Add a post."""
    form = SQLFORM(db.bboard)
    if form.process().accepted:
        session.flash = T("posted")
        redirect(URL('default', 'index'))
    return dict(form=form)

def view():
    """View a post."""
    p = db.bboard(request.args(0)) or redirect(URL('default', 'index'))
    form = SQLFORM(db.bboard, record=p, readonly=True)
    #http://www.web2py.com/books/default/chapter/29/03/overview#A-simple-wiki
    #comment on a post
    db.reply.bboard_id.default=p.id
    db.reply.bboard_id.writable=db.reply.bboard_id.readable=False
    reply = SQLFORM(db.reply)
    comments = db(db.reply.bboard_id==p.id).select()
    return dict(form=form, comments=comments, reply=reply)

@auth.requires_login()
def edit():
    """View a post."""
    p = db.bboard(request.args(0)) or redirect(URL('default', 'index'))
    if p.user_id != auth.user_id:
        session.flash = T('Not authorized.')
        redirect(URL('default', 'index'))
    form = SQLFORM(db.bboard, record=p)
    if form.process().accepted:
        session.flash = T('Updated')
        redirect(URL('default', 'index'))
    return dict(form=form)

def delete():
     p = db.bboard(request.args(0)) or redirect(URL('default', 'index'))
     if p.user_id != auth.user_id:
        session.flash = T('Not authorized.')
        redirect(URL('default', 'index'))
     form = SQLFORM(db.confirm)
     if form.process().accepted:
         db(db.bboard.id == p.id).delete()
         session.flash = T('Deleted')
         redirect(URL('default', 'index'))
     return dict(form=form)

def toggle_available():
     """Toggles the available field of an item"""
     p = db.bboard(request.args(0)) or redirect(URL('default', 'index'))
     if p.user_id != auth.user_id:
        session.flash = T('Not authorized.')
        redirect(URL('default', 'index'))
     is_available = p.available
     p.update_record(available = not is_available)
     redirect(URL('default', 'index', args=['all']))

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_login() 
def api():
    """
    this is example of API with access control
    WEB2PY provides Hypermedia API (Collection+JSON) Experimental
    """
    from gluon.contrib.hypermedia import Collection
    rules = {
        '<tablename>': {'GET':{},'POST':{},'PUT':{},'DELETE':{}},
        }
    return Collection(db).process(request,response,rules)
